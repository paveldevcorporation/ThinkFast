<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Addition1To20Rule" xml:space="preserve">
    <value>Decompose the second term into convenient terms (first add up to a round number, then the remaining part)</value>
  </data>
  <data name="Back" xml:space="preserve">
    <value>Back</value>
  </data>
  <data name="Combo" xml:space="preserve">
    <value>Combo</value>
  </data>
  <data name="Division" xml:space="preserve">
    <value>Division</value>
  </data>
  <data name="Division4Message" xml:space="preserve">
    <value>To divide a number by 4, it is divided twice by 2.</value>
  </data>
  <data name="Division5Message" xml:space="preserve">
    <value>To divide by 5, first multiply by 2, and then divide the result by 10.</value>
  </data>
  <data name="Division8Message" xml:space="preserve">
    <value>To divide a number by 8, divide it three times by 2.</value>
  </data>
  <data name="DivisionOneMessage" xml:space="preserve">
    <value>To divide by a single-digit number, we divide the original multi-digit number into convenient parts, which will be exactly divisible by a single-digit number.</value>
  </data>
  <data name="Excellent" xml:space="preserve">
    <value>Excellent!</value>
  </data>
  <data name="Minus" xml:space="preserve">
    <value>Subtraction</value>
  </data>
  <data name="Minus7Message" xml:space="preserve">
    <value>To subtract 7, subtract 10 and add 3.</value>
  </data>
  <data name="Minus8Message" xml:space="preserve">
    <value>To subtract 8, subtract 10 and add 2.</value>
  </data>
  <data name="Minus9Message" xml:space="preserve">
    <value>To subtract 9, subtract 10 and add 1.</value>
  </data>
  <data name="MinusMultiMessage" xml:space="preserve">
    <value>When subtracting multi-digit numbers, you need to divide the number that you subtract into digits.</value>
  </data>
  <data name="Multiplication" xml:space="preserve">
    <value>Multiplication</value>
  </data>
  <data name="Multiplication11Message" xml:space="preserve">
    <value>To multiply any number by 11, you need to multiply this number by 10, and then add the number itself to the result.</value>
  </data>
  <data name="Multiplication25Message" xml:space="preserve">
    <value>To verbally multiply a number by 25, it is multiplied by 100 and divided by 4.</value>
  </data>
  <data name="Multiplication25_4Message" xml:space="preserve">
    <value>To orally multiply a multiple of 4 by 25, divide it by 4 and multiply it by 100.</value>
  </data>
  <data name="Multiplication4Message" xml:space="preserve">
    <value>Multiply by 4 is to multiply by 2 twice.</value>
  </data>
  <data name="Multiplication5Message" xml:space="preserve">
    <value>To multiply by 5 an odd number, it is multiplied by 10, and then divided by 2.</value>
  </data>
  <data name="Multiplication5_2Message" xml:space="preserve">
    <value>To multiply an even number by 5, divide it by 2 and then multiply by 10.</value>
  </data>
  <data name="Multiplication8Message" xml:space="preserve">
    <value>Multiply by 8 is to multiply by 2 three times.</value>
  </data>
  <data name="Multiplication9Message" xml:space="preserve">
    <value>To multiply any number by 9, you need to multiply this number by 10, and then subtract the number itself from the result.</value>
  </data>
  <data name="MultiplicationMultyMessage" xml:space="preserve">
    <value>To multiply multi-digit numbers, you need to mentally break one of these numbers into digits.</value>
  </data>
  <data name="MultiplicationMultyOneMessage" xml:space="preserve">
    <value>To multiply a multi-digit number by a single-digit number, you need to split the multi-digit number into digits, multiply each by a single-digit number and sum the results.</value>
  </data>
  <data name="Play" xml:space="preserve">
    <value>Play</value>
  </data>
  <data name="Plus" xml:space="preserve">
    <value>Addition</value>
  </data>
  <data name="PlusMultiMessage" xml:space="preserve">
    <value>To sum up multi-digit numbers, we divide them into digits (hundreds, tens, ones) and sum them up one by one.</value>
  </data>
  <data name="Plus_7_8_9_Message" xml:space="preserve">
    <value>To simplify the calculations of the numbers 7,8,9, you need to round them up to 10, and then subtract the increase.</value>
  </data>
  <data name="PupsoCount" xml:space="preserve">
    <value>PupsoCount</value>
  </data>
  <data name="Record" xml:space="preserve">
    <value>Record</value>
  </data>
  <data name="Repeat" xml:space="preserve">
    <value>Repeat</value>
  </data>
  <data name="Rules" xml:space="preserve">
    <value>Rules</value>
  </data>
  <data name="Score" xml:space="preserve">
    <value>Score</value>
  </data>
  <data name="Subtraction1To20Rule" xml:space="preserve">
    <value>Decompose the subtractible into convenient terms (first subtract such a number so that it turns out to be round, then the remaining part)</value>
  </data>
</root>