<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Addition1To20Rule" xml:space="preserve">
    <value>Разложи второе слагаемое на удобные слагаемые (сначала добавь до круглого числа, затем оставшуюся часть)</value>
  </data>
  <data name="Back" xml:space="preserve">
    <value>Назад</value>
  </data>
  <data name="Combo" xml:space="preserve">
    <value>Комбо</value>
  </data>
  <data name="Division" xml:space="preserve">
    <value>Деление</value>
  </data>
  <data name="Division4Message" xml:space="preserve">
    <value>Чтобы разделить число на 4, его дважды делят на 2.</value>
  </data>
  <data name="Division5Message" xml:space="preserve">
    <value>Для деления на 5, сначала умножаем на 2, а затем полученное делим на 10.</value>
  </data>
  <data name="Division8Message" xml:space="preserve">
    <value>Чтобы разделить число на 8, его трижды делят на 2.</value>
  </data>
  <data name="DivisionOneMessage" xml:space="preserve">
    <value>Для деления на однозначное число разбиваем исходное многозначное число на удобные части, которые точно будут делиться на однозначное.</value>
  </data>
  <data name="Minus" xml:space="preserve">
    <value>Вычитание</value>
  </data>
  <data name="Minus7Message" xml:space="preserve">
    <value>Чтобы вычесть 7, необходимо вычесть 10 и прибавить 3.</value>
  </data>
  <data name="Minus8Message" xml:space="preserve">
    <value>Чтобы вычесть 8, необходимо вычесть 10 и прибавить 2.</value>
  </data>
  <data name="Minus9Message" xml:space="preserve">
    <value>Чтобы вычесть 9, необходимо вычесть 10 и прибавить 1.</value>
  </data>
  <data name="MinusMultiMessage" xml:space="preserve">
    <value>При вычитании многозначных чисел необходимо разбить на разряды то число, которое вы отнимаете.</value>
  </data>
  <data name="Multiplication" xml:space="preserve">
    <value>Умножение</value>
  </data>
  <data name="Multiplication11Message" xml:space="preserve">
    <value>Чтобы умножить любое число на 11 необходимо умножить это число на 10, а затем к результату добавить само число.</value>
  </data>
  <data name="Multiplication25Message" xml:space="preserve">
    <value>Чтобы устно умножить число на 25, его умножают на 100 и делят на 4.</value>
  </data>
  <data name="Multiplication25_4Message" xml:space="preserve">
    <value>Чтобы устно умножить число, кратное 4, на 25, его делят на 4 и умножают на 100.</value>
  </data>
  <data name="Multiplication4Message" xml:space="preserve">
    <value>Умножить на 4 - это дважды умножить на 2.</value>
  </data>
  <data name="Multiplication5Message" xml:space="preserve">
    <value>Для умножения на 5 нечетного числа, его умножают на 10, а потом делят на 2.</value>
  </data>
  <data name="Multiplication5_2Message" xml:space="preserve">
    <value>Для умножения на 5 четного числа, его делят на 2, а потом умножают на 10.</value>
  </data>
  <data name="Multiplication8Message" xml:space="preserve">
    <value>Умножить на 8 - это трижды умножить на 2.</value>
  </data>
  <data name="Multiplication9Message" xml:space="preserve">
    <value>Чтобы умножить любое число на 9 необходимо умножить это число на 10, а затем вычесть из результата само число.</value>
  </data>
  <data name="MultiplicationMultyMessage" xml:space="preserve">
    <value>Для умножения многозначных чисел необходимо мысленно разбить одно из этих чисел на разряды.</value>
  </data>
  <data name="MultiplicationMultyOneMessage" xml:space="preserve">
    <value>Для умножения многозначного на однозначное необходимо разбить многозначное число на разряды, перемножить каждый на однозначное число и суммировать результаты.</value>
  </data>
  <data name="Play" xml:space="preserve">
    <value>Играть</value>
  </data>
  <data name="Plus" xml:space="preserve">
    <value>Сложение</value>
  </data>
  <data name="PlusMultiMessage" xml:space="preserve">
    <value>Для cуммирования многозначных чисел, разбиваем их на разряды  (сотни, десятки, единицы) и поочередно их суммируем.</value>
  </data>
  <data name="Plus_7_8_9_Message" xml:space="preserve">
    <value>Для упрощения вычислений чисел 7,8,9 надо их округлить до 10, а затем вычесть прибавку.</value>
  </data>
  <data name="PupsoCount" xml:space="preserve">
    <value>ПупсоСчёт</value>
  </data>
  <data name="Record" xml:space="preserve">
    <value>Рекорд</value>
  </data>
  <data name="Repeat" xml:space="preserve">
    <value>Повтор</value>
  </data>
  <data name="Rules" xml:space="preserve">
    <value>Правила</value>
  </data>
  <data name="Score" xml:space="preserve">
    <value>Счет</value>
  </data>
  <data name="Subtraction1To20Rule" xml:space="preserve">
    <value>Разложи вычитаемое на удобные слагаемые (сначала вычти такое число, чтобы получилось круглое, затем оставшуюся часть)</value>
  </data>
</root>