<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Addition1To20Rule" xml:space="preserve">
    <value>Розклади другий доданок на зручні доданки (спочатку додай до круглого числа, потім решту)</value>
  </data>
  <data name="Back" xml:space="preserve">
    <value>Назад</value>
  </data>
  <data name="Combo" xml:space="preserve">
    <value>Комбо</value>
  </data>
  <data name="Division" xml:space="preserve">
    <value>Ділення</value>
  </data>
  <data name="Division4Message" xml:space="preserve">
    <value>Щоб розділити число на 4, його двічі ділять на 2.</value>
  </data>
  <data name="Division5Message" xml:space="preserve">
    <value>Для ділення на 5, спочатку множимо на 2, а потім отримане ділимо на 10.</value>
  </data>
  <data name="Division8Message" xml:space="preserve">
    <value>Щоб розділити число на 8, його тричі ділять на 2.</value>
  </data>
  <data name="DivisionOneMessage" xml:space="preserve">
    <value>Для поділу на однозначне число розбиваємо вихідне багатозначне число на зручні частини, які точно будуть ділитися на однозначне.</value>
  </data>
  <data name="Excellent" xml:space="preserve">
    <value>Відмінно!</value>
  </data>
  <data name="Minus" xml:space="preserve">
    <value>Віднімання</value>
  </data>
  <data name="Minus7Message" xml:space="preserve">
    <value>Щоб відняти 7, необхідно відняти 10 і додати 3.</value>
  </data>
  <data name="Minus8Message" xml:space="preserve">
    <value>Щоб відняти 8, необхідно відняти 10 і додати 2.</value>
  </data>
  <data name="Minus9Message" xml:space="preserve">
    <value>Щоб відняти 9, необхідно відняти 10 і додати 1.</value>
  </data>
  <data name="MinusMultiMessage" xml:space="preserve">
    <value>При відніманні багатозначних чисел необхідно розбити на розряди то число, яке ви віднімаєте.</value>
  </data>
  <data name="Multiplication" xml:space="preserve">
    <value>Множення</value>
  </data>
  <data name="Multiplication11Message" xml:space="preserve">
    <value>Щоб помножити будь-яке число на 11 необхідно помножити це число на 10, а потім до результату додати саме число.</value>
  </data>
  <data name="Multiplication25Message" xml:space="preserve">
    <value>Щоб усно помножити число на 25, його множать на 100 і ділять на 4.</value>
  </data>
  <data name="Multiplication25_4Message" xml:space="preserve">
    <value>Щоб усно помножити число, кратне 4, на 25, його ділять на 4 і множать на 100.</value>
  </data>
  <data name="Multiplication4Message" xml:space="preserve">
    <value>Помножити на 4 - це двічі помножити на 2.</value>
  </data>
  <data name="Multiplication5Message" xml:space="preserve">
    <value>Для множення на 5 непарного числа, його множать на 10, а потім ділять на 2.</value>
  </data>
  <data name="Multiplication5_2Message" xml:space="preserve">
    <value>Для множення на 5 парного числа, його ділять на 2, а потім множать на 10.</value>
  </data>
  <data name="Multiplication8Message" xml:space="preserve">
    <value>Помножити на 8 - це тричі помножити на 2.</value>
  </data>
  <data name="Multiplication9Message" xml:space="preserve">
    <value>Щоб помножити будь-яке число на 9 необхідно помножити це число на 10, а потім відняти з результату саме число.</value>
  </data>
  <data name="MultiplicationMultyMessage" xml:space="preserve">
    <value>Для множення багатозначних чисел необхідно подумки розбити одне з цих чисел на розряди.</value>
  </data>
  <data name="MultiplicationMultyOneMessage" xml:space="preserve">
    <value>Для множення багатозначного на однозначне необхідно розбити багатозначне число на розряди, перемножити кожен на однозначне число і підсумувати результати.</value>
  </data>
  <data name="Play" xml:space="preserve">
    <value>Грати</value>
  </data>
  <data name="Plus" xml:space="preserve">
    <value>Складання</value>
  </data>
  <data name="PlusMultiMessage" xml:space="preserve">
    <value>Для підсумовування багатозначних чисел, розбиваємо їх на розряди (сотні, десятки, одиниці) і по черзі їх підсумовуємо.</value>
  </data>
  <data name="Plus_7_8_9_Message" xml:space="preserve">
    <value>Для спрощення обчислень чисел 7,8,9 треба їх округлити до 10, а потім відняти надбавку.</value>
  </data>
  <data name="PupsoCount" xml:space="preserve">
    <value>ПупсоСчёт</value>
  </data>
  <data name="Record" xml:space="preserve">
    <value>Рекорд</value>
  </data>
  <data name="Repeat" xml:space="preserve">
    <value>Повтор</value>
  </data>
  <data name="Rules" xml:space="preserve">
    <value>Правило</value>
  </data>
  <data name="Score" xml:space="preserve">
    <value>Рахунок</value>
  </data>
  <data name="Subtraction1To20Rule" xml:space="preserve">
    <value>Розклади віднімається на зручні доданки (спочатку відняти таке число, щоб вийшло кругле, потім частину, що залишилася)</value>
  </data>
</root>